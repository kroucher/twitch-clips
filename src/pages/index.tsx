import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useEffect, useState } from "react"
import StreamerCard from "../components/Streamers/StreamerCard";
import InfiniteScroll from "react-infinite-scroller";
import { Channel } from "node-twitch/dist/types/objects";
import useDebounce from "../utils/useDebounce";
import { BeatLoader, PacmanLoader } from "react-spinners"
import ScrollToTop from "../components/ScrollButton/ScrollToTop";

const Home: NextPage = () => {
  const [search, setSearch] = useState("");
  const [streamers, setStreamers] = useState<Channel[]>([]);
  const debouncedSearchResults = useDebounce(search, 500);
  const { data, status, fetchNextPage, hasNextPage, isFetching } = trpc.streamers.searchStreamers.useInfiniteQuery({
    query: search,
  }, {
    getNextPageParam: (lastPage) => lastPage?.cursor,
    enabled: !!search,
    onSuccess(data) {
      setStreamers([...data.pages.map(page => page?.streamers as Channel[])].flat());
    }
  });

  useEffect(
    () => {
      if (debouncedSearchResults.length > 0) {
        setStreamers(streamers.filter((streamer) => streamer.display_name.toLowerCase().includes(search.toLowerCase())))
      } else {
        setStreamers([]);
      }
    },
    [debouncedSearchResults] // Only call effect if debounced search term changes
  );

  const loader = (
    <div className="col-span-2 sm:col-span-3 lg:col-span-6 mx-auto">
      <PacmanLoader
        size={20}
        color="white"
        loading={true}
      />
    </div>
  )

  return (
    <div className="w-full bg-slate-900 flex flex-col items-center justify-center">
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-start min-h-screen h-full w-full px-4 relative">
        <h1 className="text-3xl py-10 text-white">Twitch Clips</h1>
        <div className="w-full max-w-md relative">
          {status === "loading" && (
            <BeatLoader
              size={10}
              color="white"
              loading={isFetching}
              className="absolute bottom-1 right-2"
            />)}
          <input
            className="w-full max-w-md px-2 py-1 bg-slate-700 rounded-md text-white"
            type="text"
            placeholder="Search for Twitch Streamers"
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>


        <InfiniteScroll
          as="ul"
          loadMore={() => fetchNextPage()}
          hasMore={hasNextPage}
          loader={loader}
          className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 mx-auto content-center w-full gap-2 pt-24"
        >
          {status === "success" && streamers.map((stream, i) => (
            <StreamerCard key={i} streamer={stream} />
          ))}
        </InfiniteScroll>
        {/* scroll to top button */}
        {status === "success" && streamers.length > 20 &&
          <ScrollToTop />
        }
      </main>
    </div>
  );
};

export default Home;




